type Wallet = 
 record {
   address: text;
   currency: Currency__1;
 };
type Vansday = 
 service {
   addAdmin: (text) -> (Result);
   addBadge: (text, text) -> (Result);
   addCalendar: (NewCalendar) -> (Result);
   addCategory: (NewCategory) -> (Result);
   addChecklist: (NewChecklist) -> (Result);
   addContact: (NewContact) -> (Result);
   addExternalCalendar: (nat, ExternalCalendar) -> (Result);
   addInvitee: (NewInvitee) -> (Result);
   addItinerary: (Itinerary) -> (Result);
   addItineraryTemplate: (ItineraryTemplate) -> (Result);
   addMutiItineraries: (vec Itinerary) -> (Result);
   addNote: (NewNote) -> (Result);
   addParticipant: (Participant) -> (Result);
   addServiceRequest: (nat, text, text, nat) -> (Result);
   addSystemTodo:
    (record {
       attachments: vec text;
       desc: text;
       duedate: nat;
       itodo: text;
     }) -> (Result);
   addTodo: (NewTodo) -> (Result);
   addTodoWithSubs: (NewTodo, vec text) -> (Result);
   approveRegister: (Register) -> (Result);
   assignTask: (nat, text) -> (Result);
   availableCycles: () -> (nat) query;
   cancelEvent: (nat, opt record {
                            adate: nat;
                            op: text;
                          }) -> (Result);
   changeCalendarStatus: (nat, Status__2) -> (Result);
   changeEventStatus: (nat, Status) -> (Result);
   changeTodoStatus: (nat, Status__1) -> (Result);
   checkIn: () -> (Result_6);
   checkPermission: (nat, text) -> (Permission__1);
   checkRegistration: (nat) -> (bool);
   checkUsername: (text) -> (bool) query;
   cloneEvent: (nat) -> (Result);
   createEvent: (NewEvent) -> (Result);
   createEvents: (vec NewEvent) -> (Result);
   createProfile:
    (record {
       avatar: text;
       bio: text;
       email: text;
       name: text;
       username: text;
     }) -> (Result_5);
   createTour: (nat,
    record {
      adult: nat;
      arrive: nat;
      child: nat;
      code: text;
      days: nat;
      departure: nat;
      description: text;
      driver: record {
                name: text;
                phone: opt text;
              };
      guide: record {
               name: text;
               phone: opt text;
             };
      infant: nat;
      location: text;
      op: text;
      tz: text;
    }) -> (Result);
   deleteCalendarEvents: (nat) -> (Result);
   deleteCategory: (nat) -> (Result);
   deleteContact: (nat) -> (Result);
   deleteInvitee: (nat, text) -> (Result);
   deleteItinerary: (nat, nat) -> (Result);
   deleteItineraryTemplate: (nat, text) -> (Result);
   deleteNote: (nat) -> (Result);
   deleteParticipant: (nat, text) -> (Result);
   deleteTodo: (nat) -> (Result);
   editEvent: (nat, UpdateEvent) -> (Result);
   editTour:
    (record {
       adult: nat;
       arrive: nat;
       child: nat;
       code: text;
       days: nat;
       departure: nat;
       description: text;
       driver: record {
                 name: text;
                 phone: opt text;
               };
       guide: record {
                name: text;
                phone: opt text;
              };
       id: nat;
       infant: nat;
       location: text;
       op: text;
       tz: text;
     }) -> (Result);
   exportAchievements: () -> (vec record {
                                    text;
                                    Achievement;
                                  });
   exportCalendars: () -> (vec record {
                                 nat;
                                 Calendar;
                               });
   exportCategories: () -> (vec record {
                                  nat;
                                  Category__1;
                                });
   exportChecklists: () -> (vec record {
                                  nat;
                                  Checklist__1;
                                });
   exportContacts: () -> (vec record {
                                nat;
                                Contact__1;
                              });
   exportCurrentIds: () -> (vec record {
                                  id: nat;
                                  name: text;
                                });
   exportEvents: () -> (vec record {
                              nat;
                              Event;
                            });
   exportInterests: () -> (vec Interested);
   exportInvitees: () -> (vec Invitee);
   exportItineraries: () -> (vec Itinerary);
   exportNotes: () -> (vec record {
                             nat;
                             Note__1;
                           });
   exportParticipants: () -> (vec Participant);
   exportProfiles: () -> (vec record {
                                text;
                                Profile;
                              });
   exportRegisters: () -> (vec Register);
   exportSubscriptions: () -> (vec Subscription);
   exportTemplates: () -> (vec ItineraryTemplate);
   exportTodos: () -> (vec record {
                             nat;
                             Todo;
                           });
   exportTours: () -> (vec record {
                             nat;
                             Tour;
                           });
   getAchievement: (text) -> (opt Achievement) query;
   getAchievements: () -> (vec Achievement) query;
   getAdmins: () -> (vec text);
   getAppointmentSlots: (nat, nat, nat) ->
    (vec record {
           end: nat;
           id: nat;
           start: nat;
         }) query;
   getBannerMessage: () -> (text) query;
   getCalendar: (nat) -> (Result_4) query;
   getCalendarAllEvents: (nat, nat) -> (vec Event) query;
   getCalendarChecklists: (nat, nat) -> (vec Checklist) query;
   getCalendarContacts: (nat, opt nat, nat) -> (vec Contact__1) query;
   getCalendarEvents: (nat, nat, nat, nat) -> (vec Event) query;
   getCalendarNotes: (nat) -> (vec Note) query;
   getCalendarProfile: (nat) ->
    (variant {
       calendar: Calendar;
       nofound;
       profile: Profile__1;
     }) query;
   getCalendarProfileBookingSchedules: (nat, int, int) ->
    (vec record {
           end: nat;
           start: nat;
           tz: text;
         }) query;
   getCalendarTodos: (nat, opt TodoType, Status__1, nat) -> (vec Todo) query;
   getCalendars: (opt text, bool, nat) -> (vec Calendar) query;
   getChecklists: (nat) -> (vec Checklist) query;
   getContractWithKey: (nat, text) ->
    (opt record {
           contract: Event;
           invoices: vec Invoice;
           schedules: vec Event;
         });
   getContracts: (nat, bool) -> (vec Event) query;
   getDataState: () -> (vec record {
                              text;
                              nat;
                            }) query;
   getEvent: (nat) -> (opt Event) query;
   getEventAccessKey: (nat) -> (opt AccessKey);
   getEventWithKey: (nat, text) -> (opt Event);
   getEvents: (nat, nat, opt text, nat) -> (vec Event) query;
   getExternalCalendars: (nat) -> (vec ExternalCalendar);
   getInterestedEvents: (nat, nat, nat) -> (vec Event) query;
   getInterestes: (nat) -> (vec Interested) query;
   getInvitedEvents: (nat, nat, nat) -> (vec Event) query;
   getInvitees: (nat) -> (vec Invitee) query;
   getItineraryTemplates: (nat) -> (vec ItineraryTemplate);
   getItineries: (nat) -> (vec Itinerary) query;
   getMyCalendarRole: (nat) -> (opt Partrole) query;
   getMyCalendars: (nat) -> (vec Calendar) query;
   getMyCategories: (nat, nat) -> (vec Category) query;
   getMyChecklists: (nat) -> (vec Checklist) query;
   getMyContacts: (opt nat, nat) -> (vec Contact__1) query;
   getMyEvents: (nat, nat, nat) -> (vec Event) query;
   getMyNotes: (nat, nat) -> (vec Note) query;
   getMyParticipants: () -> (vec Participant) query;
   getMyTodos: (opt TodoType, Status__1, nat) -> (vec Todo) query;
   getNote: (nat) -> (opt Note) query;
   getNoteAccessKey: (nat) -> (opt AccessKey);
   getNoteWithKey: (nat, text) -> (opt Note);
   getNotes: (nat) -> (vec Note) query;
   getPartCalendars: (nat) -> (vec Calendar) query;
   getParticipants: (nat) -> (vec Participant) query;
   getParticipatedEvents: (nat, nat, nat) -> (vec Event) query;
   getPublicTodos: (Status__1, bool, nat) -> (vec Todo) query;
   getRegisters: (nat) -> (vec Register) query;
   getSubEvents: (nat) -> (vec Event) query;
   getSubTodos: (nat) -> (vec Todo) query;
   getSubscribedCalendars: (nat) -> (vec Calendar) query;
   getSubscribedEvents: (nat, nat, nat) -> (vec Event) query;
   getSubscribers: (nat) -> (nat) query;
   getSubscriptions: (nat) -> (vec Subscription) query;
   getSystemCalendar: () -> (nat) query;
   getSystemData: () -> (record {
                           cycles: nat;
                           heap: nat;
                           memory: nat;
                         }) query;
   getSystemSupport: () -> (text) query;
   getTodo: (nat) -> (Result_3) query;
   getTodoAccessKey: (nat) -> (opt AccessKey);
   getTodoWithKey: (nat, text) -> (opt Todo);
   getTour: (nat) ->
    (opt
      record {
        adult: nat;
        arrive: nat;
        calendar: nat;
        child: nat;
        code: text;
        days: nat;
        departure: nat;
        description: text;
        driver: record {
                  name: text;
                  phone: opt text;
                };
        guide: record {
                 name: text;
                 phone: opt text;
               };
        id: nat;
        infant: nat;
        location: Location;
        op: text;
        status: Status;
        tz: text;
      }) query;
   getTourWithKey: (nat, text) ->
    (opt
      record {
        adult: nat;
        arrive: nat;
        calendar: nat;
        child: nat;
        code: text;
        days: nat;
        departure: nat;
        description: text;
        driver: record {
                  name: text;
                  phone: opt text;
                };
        guide: record {
                 name: text;
                 phone: opt text;
               };
        id: nat;
        infant: nat;
        itineraries: vec Itinerary;
        location: Location;
        op: text;
        status: Status;
        tz: text;
      });
   getTypeTodos: (TodoType, bool, nat) -> (vec Todo) query;
   getUserEvents: (text, nat) -> (vec Event) query;
   getVerifiedEvents: (nat, nat) -> (vec Event) query;
   interested: (nat) -> (Result);
   leaveParticipants: (nat) -> (Result);
   listUsers: (nat) -> (vec Profile) query;
   lookupUser: (text) -> (opt Profile) query;
   registerActivity: (nat, NewRegister) -> (Result);
   removeAdmin: (text) -> (Result);
   removeCalendarProfile: (nat) -> (Result);
   removeEvent: (nat) -> (Result);
   removeExternalCalendar: (nat, text) -> (Result) query;
   searchContacts: (text, variant {
                            calendar: nat;
                            my;
                          }, opt nat, nat) -> (vec Contact__1) query;
   searchEvents: (opt text, variant {
                              calendar: nat;
                              my;
                            }, nat) -> (vec Event) query;
   searchNotes: (text, variant {
                         calendar: nat;
                         my;
                       }) -> (vec Note) query;
   setAdmin: (principal) -> ();
   setBannerMessage: (text) -> ();
   setDefaultPageSize: (nat) -> ();
   setEventAccessKey: (nat, opt text, int) -> (Result_2);
   setNoteAccessKey: (nat, opt text, int) -> (Result_2);
   setSystemCalendar: (nat) -> (Result);
   setSystemSupport: (text) -> (Result);
   setTodoAccessKey: (nat, opt text, int) -> (Result_2);
   subscribe: (nat) -> (Result);
   transferCalendar: (nat, principal) -> (Result);
   uninterested: (nat) -> (Result);
   unsubscribe: (nat) -> (Result);
   updateCalendar: (nat, UpdateCalendar) -> (Result);
   updateCalendarOrganization: (nat, Organization) -> (Result);
   updateCalendarProfile: (nat, Profile__1) -> (Result);
   updateCategory: (nat, text) -> (Result);
   updateChecklist: (nat, NewChecklist) -> (Result);
   updateContact: (nat, UpdateContact) -> (Result);
   updateItinerary: (Itinerary) -> (Result);
   updateNote: (nat, NewNoteReq) -> (Result);
   updateProfile: (text, text, text, text, text) -> (Result_1);
   updateTodo: (nat, UpdateTodo) -> (Result);
   userCount: () -> (nat) query;
   verifyCalendar: (nat) -> (Result);
 };
type UpdateTodo = 
 record {
   assignee: text;
   attachments: vec text;
   bounty: float64;
   description: text;
   duedate: nat;
   ispublic: bool;
   priority: Priority;
   tags: vec text;
   todo: text;
   ttype: TodoType;
 };
type UpdateEvent = 
 record {
   allday: bool;
   attachments: vec text;
   cost: float64;
   description: text;
   end: nat;
   ispublic: bool;
   location: Location;
   repeatdata: opt RepeatData;
   solution: Solution__1;
   start: nat;
   tags: vec text;
   title: text;
   tz: text;
 };
type UpdateContact = 
 record {
   address: Address;
   attachments: vec text;
   code: text;
   contact: text;
   contactid: text;
   ctype: nat;
   disable: bool;
   email: text;
   fax: text;
   name: text;
   note: text;
   phone: text;
   tags: vec text;
 };
type UpdateCalendar = 
 record {
   color: text;
   ctype: Ctype;
   description: text;
   ispublic: bool;
   name: text;
   organization: opt Organization;
   solution: Solution;
   tags: vec text;
   url: text;
 };
type Tour = 
 record {
   adult: nat;
   child: nat;
   days: nat;
   driver: record {
             name: text;
             phone: opt text;
           };
   guide: record {
            name: text;
            phone: opt text;
          };
   id: nat;
   infant: nat;
   op: text;
 };
type TodoType = 
 variant {
   bounty;
   idea;
   issue;
   proposal;
   task;
   ticket;
 };
type Todo = 
 record {
   assignee: text;
   attachments: vec text;
   bounty: float64;
   calendar: nat;
   description: text;
   donetime: int;
   duedate: nat;
   id: nat;
   ispublic: bool;
   owner: text;
   parent: nat;
   priority: Priority;
   status: Status__1;
   tags: vec text;
   todo: text;
   ttype: TodoType;
 };
type Tax = 
 record {
   amount: float64;
   name: text;
   number: text;
   rate: float64;
 };
type Subscription = 
 record {
   calendar: nat;
   stype: nat;
   subscriber: principal;
 };
type Status__3 = 
 variant {
   canceled;
   confirmed;
   new;
   paid;
 };
type Status__2 = 
 variant {
   live;
   offline;
 };
type Status__1 = 
 variant {
   done;
   new;
   progress;
 };
type Status = 
 variant {
   canceled;
   confirmed;
   finished;
   new;
 };
type Solution__1 = 
 variant {
   activity: Activity;
   appointment: Appointment;
   common;
   contract: Contract;
   itinerary: Itinerary__1;
   schedule: Schedule;
 };
type Solution = 
 variant {
   activity: ActivitySet;
   appointment: BookingSet;
   common;
   itinerary: ItinerarySet;
   schedule: ScheduleSet;
 };
type ScheduleSet = record {groups: vec Group;};
type Schedule = record {groups: vec Group__1;};
type Role = 
 record {
   name: text;
   privileges: vec Permission;
 };
type Result_6 = 
 variant {
   err: text;
   ok: int;
 };
type Result_5 = 
 variant {
   err: text;
   ok: opt Profile;
 };
type Result_4 = 
 variant {
   err: text;
   ok: Calendar;
 };
type Result_3 = 
 variant {
   err: text;
   ok: Todo;
 };
type Result_2 = 
 variant {
   err: text;
   ok: text;
 };
type Result_1 = 
 variant {
   err: text;
   ok: Profile;
 };
type Result = 
 variant {
   err: text;
   ok: nat;
 };
type Restaurant__1 = 
 record {
   code: text;
   contact: ContactInfo__1;
 };
type Restaurant = 
 record {
   amount: float64;
   cadult: nat;
   cchild: nat;
   contact: Contact;
   count: nat;
   padult: float64;
   paynumber: text;
   paytype: nat;
   pchild: float64;
 };
type RepeatType = 
 variant {
   daily;
   monthly;
   weekday;
   weekend;
   weekly;
   yearly;
 };
type RepeatData = 
 record {
   adjusts: vec nat;
   days: vec nat;
   excludes: vec nat;
   frequency: nat;
   rtype: RepeatType;
 };
type Register = 
 record {
   data: vec RegData;
   eventid: nat;
   name: text;
   register: text;
   regtime: int;
   status: RegStatus;
   ticket: opt text;
 };
type RegStatus = 
 variant {
   approved;
   confirmed;
   paid;
   regjected;
   request;
 };
type RegData = 
 record {
   name: text;
   value: text;
 };
type Profile__1 = 
 record {
   address: opt text;
   calendar: nat;
   contact: opt text;
   description: text;
   email: opt text;
   fax: opt text;
   license: opt text;
   logo: opt text;
   name: text;
   phone: opt text;
   servetime:
    opt
     record {
       end: text;
       excludes: vec nat8;
       holiday: bool;
       sevenx24: bool;
       slotlength: opt variant {
                         hours: nat8;
                         minutes: nat8;
                       };
       start: text;
       weekend: bool;
     };
   showcase: vec text;
   tax: opt text;
   tz: opt text;
   url: opt text;
   wallet: opt record {
                 address: text;
                 network: text;
               };
 };
type Profile = 
 record {
   avatar: text;
   bio: text;
   createtime: int;
   email: text;
   lastlogin: int;
   name: text;
   role: nat;
   status: nat;
   userid: text;
   username: text;
 };
type Priority = 
 variant {
   high;
   low;
   medium;
 };
type Permission__1 = 
 variant {
   edit;
   no;
   read;
 };
type Permission = 
 record {
   authority: Authority;
   component: Component;
 };
type PaymentTerm = 
 record {
   address: text;
   name: text;
 };
type Partrole = 
 variant {
   admin;
   editor;
   viewer;
 };
type Participant = 
 record {
   calendar: nat;
   name: text;
   pid: text;
   role: Partrole;
 };
type Organization = 
 record {
   address: Address__1;
   bn: text;
   contact: text;
   currency: text;
   email: text;
   fax: text;
   logo: text;
   name: text;
   phone: text;
   tn: text;
   wallet: text;
 };
type Note__1 = 
 record {
   attachments: vec text;
   calendar: nat;
   category: nat;
   content: text;
   createtime: int;
   id: nat;
   ispublic: bool;
   owner: text;
   tags: vec text;
   title: text;
 };
type Note = 
 record {
   attachments: vec text;
   calendar: nat;
   category: nat;
   content: text;
   createtime: int;
   id: nat;
   ispublic: bool;
   owner: text;
   tags: vec text;
   title: text;
 };
type NewTodo = 
 record {
   assignee: text;
   attachments: vec text;
   bounty: float64;
   calendar: nat;
   description: text;
   duedate: nat;
   ispublic: bool;
   parent: nat;
   priority: Priority;
   tags: vec text;
   todo: text;
   ttype: TodoType;
 };
type NewRegister = 
 record {
   data: vec RegData;
   name: text;
 };
type NewNoteReq = 
 record {
   attachments: vec text;
   calendar: nat;
   category: nat;
   content: text;
   ispublic: bool;
   tags: vec text;
   title: text;
 };
type NewNote = 
 record {
   attachments: vec text;
   calendar: nat;
   category: nat;
   content: text;
   ispublic: bool;
   tags: vec text;
   title: text;
 };
type NewInvitee = 
 record {
   eventid: nat;
   inviteeid: text;
   inviteename: text;
   role: variant {
           admin;
           moderator;
           viewer;
         };
 };
type NewEvent = 
 record {
   allday: bool;
   attachments: vec text;
   calendar: nat;
   cost: float64;
   description: text;
   end: nat;
   etype: Etype;
   ispublic: bool;
   isrepeat: bool;
   location: Location;
   parent: nat;
   repeatdata: opt RepeatData;
   solution: Solution__1;
   start: nat;
   tags: vec text;
   title: text;
   tz: text;
 };
type NewContact = 
 record {
   address: Address;
   attachments: vec text;
   calendar: nat;
   code: text;
   contact: text;
   contactid: text;
   ctype: nat;
   email: text;
   fax: text;
   name: text;
   note: text;
   phone: text;
   tags: vec text;
 };
type NewChecklist = 
 record {
   calendar: nat;
   description: text;
   ispublic: bool;
   list: vec text;
   name: text;
 };
type NewCategory = 
 record {
   hook: nat;
   name: text;
   parent: nat;
 };
type NewCalendar = 
 record {
   color: text;
   ctype: Ctype;
   description: text;
   ispublic: bool;
   name: text;
   organization: opt Organization;
   solution: Solution;
   tags: vec text;
   url: text;
 };
type Location = 
 variant {
   address: text;
   geo: text;
   url: text;
 };
type KeyComponent = 
 variant {
   calendar;
   checklist;
   comment;
   contact;
   event;
   expense;
   invoice;
   log;
   message;
   note;
   order;
   profile;
   todo;
 };
type Itinerary__1 = 
 record {
   cost: Cost;
   driver: record {
             name: text;
             phone: text;
           };
   idays: vec Iday;
   operater: text;
 };
type ItineraryTemplate = 
 record {
   calendar: nat;
   code: text;
   description: text;
   itineraries: vec record {
                      from: text;
                      memos: vec text;
                      to: text;
                      via: text;
                    };
   name: text;
 };
type ItinerarySet = record {};
type Itinerary = 
 record {
   admissions: vec Admission;
   breakfast: Restaurant;
   day: nat;
   dinner: Restaurant;
   from: text;
   hotel: Hotel;
   id: nat;
   lunch: Restaurant;
   memos: vec text;
   to: text;
   via: text;
 };
type Item = 
 record {
   desc: text;
   itype: variant {
            cost;
            income;
          };
   price: float64;
   quantity: nat32;
 };
type Invoice = 
 record {
   adjust: float64;
   amount: float64;
   calendar: nat;
   cost: float64;
   createtime: int;
   currency: text;
   discount: float64;
   duetime: nat;
   event: nat;
   from: Contact__2;
   id: text;
   idate: nat;
   items: vec Item;
   note: text;
   owner: text;
   paymentterms: vec PaymentTerm;
   receiver: opt text;
   status: Status__3;
   tax: Tax;
   to: Contact__2;
 };
type InviteeStatus = 
 variant {
   accepted;
   invited;
   rejected;
 };
type Invitee = 
 record {
   eventid: nat;
   inviteeid: text;
   inviteename: text;
   role: variant {
           admin;
           moderator;
           viewer;
         };
   status: InviteeStatus;
 };
type Interested = 
 record {
   event: nat;
   interester: principal;
 };
type Iday = 
 record {
   admissions: vec Admission__1;
   breakfast: opt Restaurant__1;
   dinner: opt Restaurant__1;
   from: text;
   hotel: opt Hotel__1;
   itineraries: vec text;
   lunch: opt Restaurant__1;
   to: text;
   via: text;
 };
type Hotel__1 = 
 record {
   code: text;
   contact: ContactInfo__1;
 };
type Hotel = 
 record {
   amount: float64;
   cdouble: nat;
   contact: Contact;
   cquadruple: nat;
   csingle: nat;
   ctriple: nat;
   paynumber: text;
   paytype: nat;
   pdouble: float64;
   pquadruple: float64;
   psingle: float64;
   ptriple: float64;
 };
type Group__1 = 
 record {
   members: vec text;
   supervisor: text;
 };
type Group = 
 record {
   members: vec text;
   supervisor: text;
 };
type Formfield = 
 record {
   description: text;
   isrequired: bool;
   name: text;
 };
type ExternalCalendar = 
 record {
   link: text;
   name: text;
 };
type Event = 
 record {
   allday: bool;
   attachments: vec text;
   calendar: nat;
   cost: float64;
   description: text;
   end: nat;
   etype: Etype;
   id: nat;
   ispublic: bool;
   isrepeat: bool;
   location: Location;
   owner: text;
   parent: nat;
   repeatdata: opt RepeatData;
   solution: Solution__1;
   start: nat;
   status: Status;
   tags: vec text;
   title: text;
   tz: text;
 };
type Etype = 
 variant {
   activity;
   appointment;
   common;
   contract;
   itinerary;
   schedule;
 };
type Currency__1 = text;
type Currency = text;
type Ctype = 
 variant {
   activity;
   appointment;
   common;
   itinerary;
   schedule;
 };
type Cost = 
 record {
   amount: float64;
   currency: text;
 };
type Contract = 
 record {
   chargetype: variant {
                 mult: text;
                 one;
               };
   cost: Cost;
   jon: ContactInfo;
   paymenterm: text;
   plan: nat;
   sam: ContactInfo;
   signature:
    opt
     variant {
       jon: opt record {
                  sign: text;
                  stime: int;
                };
       sam: opt record {
                  sign: text;
                  stime: int;
                };
     };
 };
type Contact__2 = 
 record {
   address: Address__2;
   contact: opt text;
   email: text;
   fax: opt text;
   name: text;
   phone: text;
   url: opt text;
   wallet: opt Wallet;
 };
type Contact__1 = 
 record {
   address: Address;
   attachments: vec text;
   calendar: nat;
   code: text;
   contact: text;
   contactid: text;
   ctype: nat;
   disable: bool;
   email: text;
   fax: text;
   id: nat;
   name: text;
   note: text;
   owner: text;
   phone: text;
   tags: vec text;
 };
type ContactInfo__1 = 
 record {
   address: text;
   city: text;
   contact: opt text;
   country: text;
   email: text;
   fax: opt text;
   name: text;
   phone: text;
   postcode: text;
   province: text;
   wallet: opt record {
                 address: text;
                 network: text;
               };
   website: opt text;
 };
type ContactInfo = 
 record {
   address: text;
   contact: text;
   email: text;
   fax: text;
   name: text;
   phone: text;
 };
type Contact = 
 record {
   address: text;
   city: text;
   code: text;
   country: text;
   fax: text;
   name: text;
   phone: text;
   postcode: text;
   province: text;
 };
type Component = 
 variant {
   calendar;
   contact;
   event;
   note;
   todo;
   wallet;
 };
type Checklist__1 = 
 record {
   calendar: nat;
   description: text;
   id: nat;
   ispublic: bool;
   list: vec text;
   name: text;
   owner: text;
 };
type Checklist = 
 record {
   calendar: nat;
   description: text;
   id: nat;
   ispublic: bool;
   list: vec text;
   name: text;
   owner: text;
 };
type Category__1 = 
 record {
   hook: nat;
   id: nat;
   name: text;
   owner: text;
   parent: nat;
 };
type Category = 
 record {
   hook: nat;
   id: nat;
   name: text;
   owner: text;
   parent: nat;
 };
type Calendar = 
 record {
   color: text;
   ctype: Ctype;
   description: text;
   id: nat;
   ispublic: bool;
   isverified: bool;
   name: text;
   organization: opt Organization;
   owner: text;
   solution: Solution;
   status: Status__2;
   tags: vec text;
   url: text;
 };
type BookingSet = 
 record {
   bookend: text;
   bookstart: text;
   slotlength: variant {
                 hours: nat8;
                 minutes: nat8;
               };
   tz: text;
 };
type Authority = 
 variant {
   admin;
   edit;
   read;
 };
type Appointment = 
 record {
   cost: Cost;
   guest: ContactInfo;
 };
type Admission__1 = 
 record {
   code: text;
   contact: ContactInfo__1;
 };
type Admission = 
 record {
   amount: float64;
   cadult: nat;
   cchild: nat;
   contact: Contact;
   count: nat;
   padult: float64;
   paynumber: text;
   paytype: nat;
   pchild: float64;
 };
type Address__2 = 
 record {
   address: text;
   city: text;
   country: text;
   postcode: text;
   province: text;
 };
type Address__1 = 
 record {
   address: text;
   aptno: text;
   city: text;
   country: text;
   postcode: text;
   province: text;
 };
type Address = 
 record {
   address: text;
   city: text;
   country: text;
   postcode: text;
   province: text;
 };
type ActivitySet = record {currency: Currency;};
type Activity = 
 record {
   attendeelimit: nat;
   formfields: vec Formfield;
   price: Cost;
   registerat: variant {
                 createon;
                 starton;
               };
 };
type Achievement = 
 record {
   badges: vec text;
   credit: nat;
   roles: vec Role;
   userid: text;
 };
type AccessKey = 
 record {
   componentid: text;
   expiredtime: int;
   key: text;
   keycomponent: KeyComponent;
 };
service : () -> Vansday
